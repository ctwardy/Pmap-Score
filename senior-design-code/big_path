%stitching paths together
%human planning level
%assumptions: rectangular search region, split up into other rectangular
%regions, search regions numbered columnwise (standard matlab convention)as [1 4 7; 2 5 8; 3 6 9], each region is
%the same size, want to spend time in every search region
%inputs from user: probability files, number of levels to go down - N
% the inputs should be interfaced with the gui somehow

N = input('How many layers of Resolution?'); %integer
prob_detect = input('What is the UAVs probability of detection?'); % number between 0 and 1
top_level_probs = load(input('Top Level File Name','s')); %filename
C = input('What percentage of the total area can the UAV cover?'); % needs a number between 0 and 1
starting_path = input('What is the starting path through the top level?') % needs an n x 2 array
%need to check inputs for final version
current_path = starting_path;
higher_res_probs = top_level_probs;
[m_old, n_old] = size(top_level_probs);
for i = 1:N-1 %for every level of resolution
    for j = 1: length(current_path(:,1))-1
        %load this node's next level - would like to load entire
        %resolutions probabilities and segment but segmentation indexing 
        %is proving difficult to wrap my head around.
        current_res_probs(:,:,j) = load(input('next probability array','s'));
        C_area = floor(C*higher_res_probs(current_path(j,2), current_path(j,1))*numel(current_res_probs)); %current cost * probability subject is in an area = proportional time spent in that area * number of cells = number of cells in new resolution we can cover
        [m_new,n_new] = size(current_res_probs);
        %calculate starting and ending points for this level from previous
        %path resolution
        dx_new = current_path(j+1,1) - current_path(j,1); %next direction, determines ending point
        dy_new = current_path(j+1,2) - current_path(j,2);
        if j>2
            dx_old = current_path(j,1) - current_path(j-1,1); %previous direction, determines starting point
            dy_old = current_path(j,2) - current_path(j-1,2);
        else
            dx_old = 0;
            dy_old = 0;
        end
        [spt,ept] = endpts(dx_old, dy_old, dx_new, dy_new,m_new, n_new);
        [path_part(:,:,j), path_sum] = hill_climbing(m_new,n_new,current_res_probs,prob_detect,C_area,spt,ept);
    end
    %link the paths together
    
    [current_path,higher_res_probs] = link_paths(path_part,current_path,m_old, n_old, m_new,n_new,current_res_probs, higher_res_probs);
end

%compute the final path sum        
